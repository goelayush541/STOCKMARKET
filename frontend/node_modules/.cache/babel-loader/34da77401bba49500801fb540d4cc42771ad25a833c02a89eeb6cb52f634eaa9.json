{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useCallback } from 'react';\nimport { api } from '../services/api';\nexport const useMarketData = (symbol, period = '1d') => {\n  _s();\n  const [data, setData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [lastUpdated, setLastUpdated] = useState(null);\n  const fetchMarketData = useCallback(async () => {\n    if (!symbol) {\n      setData([]);\n      setLoading(false);\n      setError(null);\n      return;\n    }\n    try {\n      setLoading(true);\n      setError(null);\n      console.log(`Fetching market data for ${symbol}, period: ${period}`);\n      const marketData = await api.getMarketData(symbol, period);\n      console.log('Market data received:', marketData);\n\n      // Ensure we have a valid array of market data\n      if (Array.isArray(marketData) && marketData.length > 0) {\n        setData(marketData);\n        setLastUpdated(new Date());\n      } else {\n        // If no data returned, use mock data for development\n        console.log('No real data available, using mock data');\n        const mockData = generateMockMarketData(symbol, 20);\n        setData(mockData);\n        setLastUpdated(new Date());\n        setError('Using mock data (real data unavailable)');\n      }\n    } catch (err) {\n      console.error('Error in useMarketData:', err);\n\n      // Fallback to mock data on error\n      console.log('API error, falling back to mock data');\n      const mockData = generateMockMarketData(symbol, 20);\n      setData(mockData);\n      setLastUpdated(new Date());\n      setError(`Server error: ${err.message}. Using mock data.`);\n    } finally {\n      setLoading(false);\n    }\n  }, [symbol, period]);\n  useEffect(() => {\n    fetchMarketData();\n  }, [fetchMarketData]);\n\n  // Calculate derived data\n  const currentPrice = data.length > 0 ? data[0].close : 0;\n  const previousPrice = data.length > 1 ? data[1].close : currentPrice;\n  const priceChange = currentPrice - previousPrice;\n  const priceChangePercent = previousPrice > 0 ? priceChange / previousPrice * 100 : 0;\n  const volume = data.length > 0 ? data[0].volume : 0;\n  const averageVolume = data.length > 0 ? data.reduce((sum, item) => sum + item.volume, 0) / data.length : 0;\n\n  // Calculate technical indicators (only if we have enough data)\n  const technicalIndicators = calculateTechnicalIndicators(data);\n\n  // Refresh function\n  const refresh = async () => {\n    console.log('Refreshing market data...');\n    await fetchMarketData();\n  };\n  return {\n    data,\n    loading,\n    error,\n    lastUpdated,\n    refresh,\n    // Derived data\n    currentPrice,\n    previousPrice,\n    priceChange,\n    priceChangePercent,\n    volume,\n    averageVolume,\n    // Technical indicators\n    technicalIndicators\n  };\n};\n\n// Helper function to generate mock market data\n_s(useMarketData, \"Vo5ITiCAipaQLQhrLnin6tjZ3J4=\");\nconst generateMockMarketData = (symbol, count = 20) => {\n  const basePrice = 100 + Math.random() * 500; // $100-$600 base price\n  let currentPrice = basePrice;\n  const data = [];\n  for (let i = 0; i < count; i++) {\n    const priceChange = (Math.random() - 0.5) * 10; // -5 to +5 price change\n    currentPrice += priceChange;\n    const volume = 1000000 + Math.random() * 9000000; // 1M-10M volume\n\n    // Ensure prices are realistic (high >= low, etc.)\n    const open = currentPrice - Math.random() * 2;\n    const high = Math.max(currentPrice, open) + Math.random() * 3;\n    const low = Math.min(currentPrice, open) - Math.random() * 3;\n    const close = currentPrice;\n    data.push({\n      symbol: symbol.toUpperCase(),\n      timestamp: new Date(Date.now() - i * 5 * 60 * 1000),\n      // 5-minute intervals going back\n      open: parseFloat(open.toFixed(2)),\n      high: parseFloat(high.toFixed(2)),\n      low: parseFloat(low.toFixed(2)),\n      close: parseFloat(close.toFixed(2)),\n      volume: Math.floor(volume),\n      source: 'mock'\n    });\n  }\n  return data.reverse(); // Return in chronological order (oldest first)\n};\n\n// Calculate technical indicators\nconst calculateTechnicalIndicators = data => {\n  if (data.length < 2) {\n    return {\n      sma20: 0,\n      rsi: 50,\n      macd: {\n        value: 0,\n        signal: 0,\n        histogram: 0\n      },\n      bollingerBands: {\n        upper: 0,\n        middle: 0,\n        lower: 0\n      },\n      support: 0,\n      resistance: 0\n    };\n  }\n\n  // Simple Moving Average (20 periods)\n  const sma20 = data.length >= 20 ? data.slice(0, 20).reduce((sum, item) => sum + item.close, 0) / 20 : data.reduce((sum, item) => sum + item.close, 0) / data.length;\n\n  // RSI Calculation\n  const rsi = calculateRSI(data);\n\n  // MACD Calculation\n  const macd = calculateMACD(data);\n\n  // Bollinger Bands\n  const bollingerBands = calculateBollingerBands(data);\n\n  // Support and Resistance (simplified)\n  const supportResistance = calculateSupportResistance(data);\n  return {\n    sma20: parseFloat(sma20.toFixed(2)),\n    rsi: parseFloat(rsi.toFixed(2)),\n    macd,\n    bollingerBands,\n    ...supportResistance\n  };\n};\n\n// RSI Calculation (14-period)\nconst calculateRSI = (data, period = 14) => {\n  if (data.length < period + 1) return 50;\n  let gains = 0;\n  let losses = 0;\n\n  // Calculate initial average gains and losses\n  for (let i = 1; i <= period; i++) {\n    const change = data[i].close - data[i - 1].close;\n    if (change > 0) {\n      gains += change;\n    } else {\n      losses -= change;\n    }\n  }\n  let avgGain = gains / period;\n  let avgLoss = losses / period;\n\n  // Calculate subsequent values using Wilder's smoothing\n  for (let i = period + 1; i < data.length; i++) {\n    const change = data[i].close - data[i - 1].close;\n    if (change > 0) {\n      avgGain = (avgGain * (period - 1) + change) / period;\n      avgLoss = avgLoss * (period - 1) / period;\n    } else {\n      avgGain = avgGain * (period - 1) / period;\n      avgLoss = (avgLoss * (period - 1) - change) / period;\n    }\n  }\n  if (avgLoss === 0) return 100;\n  const rs = avgGain / avgLoss;\n  return 100 - 100 / (1 + rs);\n};\n\n// MACD Calculation\nconst calculateMACD = data => {\n  if (data.length < 26) {\n    return {\n      value: 0,\n      signal: 0,\n      histogram: 0\n    };\n  }\n\n  // Calculate EMAs\n  const ema12 = calculateEMA(data, 12);\n  const ema26 = calculateEMA(data, 26);\n  const macdValue = ema12 - ema26;\n\n  // Calculate signal line (EMA of MACD)\n  const macdData = data.map((_, index) => ({\n    close: calculateEMA(data.slice(0, index + 1), 12) - calculateEMA(data.slice(0, index + 1), 26)\n  }));\n  const signal = calculateEMA(macdData.slice(-9), 9);\n  const histogram = macdValue - signal;\n  return {\n    value: parseFloat(macdValue.toFixed(4)),\n    signal: parseFloat(signal.toFixed(4)),\n    histogram: parseFloat(histogram.toFixed(4))\n  };\n};\n\n// EMA Calculation\nconst calculateEMA = (data, period) => {\n  if (data.length === 0) return 0;\n  if (data.length < period) {\n    // Use SMA if not enough data for EMA\n    return data.reduce((sum, item) => sum + item.close, 0) / data.length;\n  }\n  const multiplier = 2 / (period + 1);\n  let ema = data.slice(0, period).reduce((sum, item) => sum + item.close, 0) / period;\n  for (let i = period; i < data.length; i++) {\n    ema = (data[i].close - ema) * multiplier + ema;\n  }\n  return ema;\n};\n\n// Bollinger Bands Calculation\nconst calculateBollingerBands = (data, period = 20) => {\n  if (data.length < period) {\n    const currentPrice = data.length > 0 ? data[0].close : 0;\n    return {\n      upper: currentPrice,\n      middle: currentPrice,\n      lower: currentPrice\n    };\n  }\n  const slice = data.slice(0, period);\n  const middle = slice.reduce((sum, item) => sum + item.close, 0) / period;\n  const variance = slice.reduce((sum, item) => {\n    return sum + Math.pow(item.close - middle, 2);\n  }, 0) / period;\n  const standardDeviation = Math.sqrt(variance);\n  const upper = middle + 2 * standardDeviation;\n  const lower = middle - 2 * standardDeviation;\n  return {\n    upper: parseFloat(upper.toFixed(2)),\n    middle: parseFloat(middle.toFixed(2)),\n    lower: parseFloat(lower.toFixed(2))\n  };\n};\n\n// Support and Resistance Levels (simplified)\nconst calculateSupportResistance = data => {\n  if (data.length < 10) {\n    return {\n      support: 0,\n      resistance: 0\n    };\n  }\n  const prices = data.map(item => item.close);\n  const minPrice = Math.min(...prices);\n  const maxPrice = Math.max(...prices);\n  const range = maxPrice - minPrice;\n\n  // Simple support and resistance levels\n  const support = minPrice + range * 0.25; // 25% above lowest\n  const resistance = maxPrice - range * 0.25; // 25% below highest\n\n  return {\n    support: parseFloat(support.toFixed(2)),\n    resistance: parseFloat(resistance.toFixed(2))\n  };\n};\nexport default useMarketData;","map":{"version":3,"names":["useState","useEffect","useCallback","api","useMarketData","symbol","period","_s","data","setData","loading","setLoading","error","setError","lastUpdated","setLastUpdated","fetchMarketData","console","log","marketData","getMarketData","Array","isArray","length","Date","mockData","generateMockMarketData","err","message","currentPrice","close","previousPrice","priceChange","priceChangePercent","volume","averageVolume","reduce","sum","item","technicalIndicators","calculateTechnicalIndicators","refresh","count","basePrice","Math","random","i","open","high","max","low","min","push","toUpperCase","timestamp","now","parseFloat","toFixed","floor","source","reverse","sma20","rsi","macd","value","signal","histogram","bollingerBands","upper","middle","lower","support","resistance","slice","calculateRSI","calculateMACD","calculateBollingerBands","supportResistance","calculateSupportResistance","gains","losses","change","avgGain","avgLoss","rs","ema12","calculateEMA","ema26","macdValue","macdData","map","_","index","multiplier","ema","variance","pow","standardDeviation","sqrt","prices","minPrice","maxPrice","range"],"sources":["C:/Users/Ayush Goel/OneDrive/Desktop/DEPLOYED/STOCKMARKET/frontend/src/hooks/useMarketData.js"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\r\nimport { api } from '../services/api';\r\n\r\nexport const useMarketData = (symbol, period = '1d') => {\r\n  const [data, setData] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [lastUpdated, setLastUpdated] = useState(null);\r\n\r\n  const fetchMarketData = useCallback(async () => {\r\n    if (!symbol) {\r\n      setData([]);\r\n      setLoading(false);\r\n      setError(null);\r\n      return;\r\n    }\r\n    \r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n      \r\n      console.log(`Fetching market data for ${symbol}, period: ${period}`);\r\n      const marketData = await api.getMarketData(symbol, period);\r\n      console.log('Market data received:', marketData);\r\n      \r\n      // Ensure we have a valid array of market data\r\n      if (Array.isArray(marketData) && marketData.length > 0) {\r\n        setData(marketData);\r\n        setLastUpdated(new Date());\r\n      } else {\r\n        // If no data returned, use mock data for development\r\n        console.log('No real data available, using mock data');\r\n        const mockData = generateMockMarketData(symbol, 20);\r\n        setData(mockData);\r\n        setLastUpdated(new Date());\r\n        setError('Using mock data (real data unavailable)');\r\n      }\r\n    } catch (err) {\r\n      console.error('Error in useMarketData:', err);\r\n      \r\n      // Fallback to mock data on error\r\n      console.log('API error, falling back to mock data');\r\n      const mockData = generateMockMarketData(symbol, 20);\r\n      setData(mockData);\r\n      setLastUpdated(new Date());\r\n      setError(`Server error: ${err.message}. Using mock data.`);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [symbol, period]);\r\n\r\n  useEffect(() => {\r\n    fetchMarketData();\r\n  }, [fetchMarketData]);\r\n\r\n  // Calculate derived data\r\n  const currentPrice = data.length > 0 ? data[0].close : 0;\r\n  const previousPrice = data.length > 1 ? data[1].close : currentPrice;\r\n  const priceChange = currentPrice - previousPrice;\r\n  const priceChangePercent = previousPrice > 0 ? (priceChange / previousPrice) * 100 : 0;\r\n\r\n  const volume = data.length > 0 ? data[0].volume : 0;\r\n  const averageVolume = data.length > 0 \r\n    ? data.reduce((sum, item) => sum + item.volume, 0) / data.length \r\n    : 0;\r\n\r\n  // Calculate technical indicators (only if we have enough data)\r\n  const technicalIndicators = calculateTechnicalIndicators(data);\r\n\r\n  // Refresh function\r\n  const refresh = async () => {\r\n    console.log('Refreshing market data...');\r\n    await fetchMarketData();\r\n  };\r\n\r\n  return { \r\n    data, \r\n    loading, \r\n    error, \r\n    lastUpdated,\r\n    refresh,\r\n    // Derived data\r\n    currentPrice,\r\n    previousPrice,\r\n    priceChange,\r\n    priceChangePercent,\r\n    volume,\r\n    averageVolume,\r\n    // Technical indicators\r\n    technicalIndicators\r\n  };\r\n};\r\n\r\n// Helper function to generate mock market data\r\nconst generateMockMarketData = (symbol, count = 20) => {\r\n  const basePrice = 100 + Math.random() * 500; // $100-$600 base price\r\n  let currentPrice = basePrice;\r\n  const data = [];\r\n\r\n  for (let i = 0; i < count; i++) {\r\n    const priceChange = (Math.random() - 0.5) * 10; // -5 to +5 price change\r\n    currentPrice += priceChange;\r\n    const volume = 1000000 + Math.random() * 9000000; // 1M-10M volume\r\n    \r\n    // Ensure prices are realistic (high >= low, etc.)\r\n    const open = currentPrice - Math.random() * 2;\r\n    const high = Math.max(currentPrice, open) + Math.random() * 3;\r\n    const low = Math.min(currentPrice, open) - Math.random() * 3;\r\n    const close = currentPrice;\r\n\r\n    data.push({\r\n      symbol: symbol.toUpperCase(),\r\n      timestamp: new Date(Date.now() - i * 5 * 60 * 1000), // 5-minute intervals going back\r\n      open: parseFloat(open.toFixed(2)),\r\n      high: parseFloat(high.toFixed(2)),\r\n      low: parseFloat(low.toFixed(2)),\r\n      close: parseFloat(close.toFixed(2)),\r\n      volume: Math.floor(volume),\r\n      source: 'mock'\r\n    });\r\n  }\r\n\r\n  return data.reverse(); // Return in chronological order (oldest first)\r\n};\r\n\r\n// Calculate technical indicators\r\nconst calculateTechnicalIndicators = (data) => {\r\n  if (data.length < 2) {\r\n    return {\r\n      sma20: 0,\r\n      rsi: 50,\r\n      macd: { value: 0, signal: 0, histogram: 0 },\r\n      bollingerBands: { upper: 0, middle: 0, lower: 0 },\r\n      support: 0,\r\n      resistance: 0\r\n    };\r\n  }\r\n\r\n  // Simple Moving Average (20 periods)\r\n  const sma20 = data.length >= 20 \r\n    ? data.slice(0, 20).reduce((sum, item) => sum + item.close, 0) / 20\r\n    : data.reduce((sum, item) => sum + item.close, 0) / data.length;\r\n\r\n  // RSI Calculation\r\n  const rsi = calculateRSI(data);\r\n\r\n  // MACD Calculation\r\n  const macd = calculateMACD(data);\r\n\r\n  // Bollinger Bands\r\n  const bollingerBands = calculateBollingerBands(data);\r\n\r\n  // Support and Resistance (simplified)\r\n  const supportResistance = calculateSupportResistance(data);\r\n\r\n  return {\r\n    sma20: parseFloat(sma20.toFixed(2)),\r\n    rsi: parseFloat(rsi.toFixed(2)),\r\n    macd,\r\n    bollingerBands,\r\n    ...supportResistance\r\n  };\r\n};\r\n\r\n// RSI Calculation (14-period)\r\nconst calculateRSI = (data, period = 14) => {\r\n  if (data.length < period + 1) return 50;\r\n\r\n  let gains = 0;\r\n  let losses = 0;\r\n\r\n  // Calculate initial average gains and losses\r\n  for (let i = 1; i <= period; i++) {\r\n    const change = data[i].close - data[i - 1].close;\r\n    if (change > 0) {\r\n      gains += change;\r\n    } else {\r\n      losses -= change;\r\n    }\r\n  }\r\n\r\n  let avgGain = gains / period;\r\n  let avgLoss = losses / period;\r\n\r\n  // Calculate subsequent values using Wilder's smoothing\r\n  for (let i = period + 1; i < data.length; i++) {\r\n    const change = data[i].close - data[i - 1].close;\r\n    \r\n    if (change > 0) {\r\n      avgGain = (avgGain * (period - 1) + change) / period;\r\n      avgLoss = (avgLoss * (period - 1)) / period;\r\n    } else {\r\n      avgGain = (avgGain * (period - 1)) / period;\r\n      avgLoss = (avgLoss * (period - 1) - change) / period;\r\n    }\r\n  }\r\n\r\n  if (avgLoss === 0) return 100;\r\n  \r\n  const rs = avgGain / avgLoss;\r\n  return 100 - (100 / (1 + rs));\r\n};\r\n\r\n// MACD Calculation\r\nconst calculateMACD = (data) => {\r\n  if (data.length < 26) {\r\n    return { value: 0, signal: 0, histogram: 0 };\r\n  }\r\n\r\n  // Calculate EMAs\r\n  const ema12 = calculateEMA(data, 12);\r\n  const ema26 = calculateEMA(data, 26);\r\n  const macdValue = ema12 - ema26;\r\n  \r\n  // Calculate signal line (EMA of MACD)\r\n  const macdData = data.map((_, index) => ({ \r\n    close: calculateEMA(data.slice(0, index + 1), 12) - calculateEMA(data.slice(0, index + 1), 26) \r\n  }));\r\n  const signal = calculateEMA(macdData.slice(-9), 9);\r\n  \r\n  const histogram = macdValue - signal;\r\n\r\n  return {\r\n    value: parseFloat(macdValue.toFixed(4)),\r\n    signal: parseFloat(signal.toFixed(4)),\r\n    histogram: parseFloat(histogram.toFixed(4))\r\n  };\r\n};\r\n\r\n// EMA Calculation\r\nconst calculateEMA = (data, period) => {\r\n  if (data.length === 0) return 0;\r\n  if (data.length < period) {\r\n    // Use SMA if not enough data for EMA\r\n    return data.reduce((sum, item) => sum + item.close, 0) / data.length;\r\n  }\r\n\r\n  const multiplier = 2 / (period + 1);\r\n  let ema = data.slice(0, period).reduce((sum, item) => sum + item.close, 0) / period;\r\n\r\n  for (let i = period; i < data.length; i++) {\r\n    ema = (data[i].close - ema) * multiplier + ema;\r\n  }\r\n\r\n  return ema;\r\n};\r\n\r\n// Bollinger Bands Calculation\r\nconst calculateBollingerBands = (data, period = 20) => {\r\n  if (data.length < period) {\r\n    const currentPrice = data.length > 0 ? data[0].close : 0;\r\n    return { upper: currentPrice, middle: currentPrice, lower: currentPrice };\r\n  }\r\n\r\n  const slice = data.slice(0, period);\r\n  const middle = slice.reduce((sum, item) => sum + item.close, 0) / period;\r\n  \r\n  const variance = slice.reduce((sum, item) => {\r\n    return sum + Math.pow(item.close - middle, 2);\r\n  }, 0) / period;\r\n  \r\n  const standardDeviation = Math.sqrt(variance);\r\n  const upper = middle + (2 * standardDeviation);\r\n  const lower = middle - (2 * standardDeviation);\r\n\r\n  return {\r\n    upper: parseFloat(upper.toFixed(2)),\r\n    middle: parseFloat(middle.toFixed(2)),\r\n    lower: parseFloat(lower.toFixed(2))\r\n  };\r\n};\r\n\r\n// Support and Resistance Levels (simplified)\r\nconst calculateSupportResistance = (data) => {\r\n  if (data.length < 10) {\r\n    return { support: 0, resistance: 0 };\r\n  }\r\n\r\n  const prices = data.map(item => item.close);\r\n  const minPrice = Math.min(...prices);\r\n  const maxPrice = Math.max(...prices);\r\n  const range = maxPrice - minPrice;\r\n\r\n  // Simple support and resistance levels\r\n  const support = minPrice + range * 0.25; // 25% above lowest\r\n  const resistance = maxPrice - range * 0.25; // 25% below highest\r\n\r\n  return {\r\n    support: parseFloat(support.toFixed(2)),\r\n    resistance: parseFloat(resistance.toFixed(2))\r\n  };\r\n};\r\n\r\nexport default useMarketData;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}