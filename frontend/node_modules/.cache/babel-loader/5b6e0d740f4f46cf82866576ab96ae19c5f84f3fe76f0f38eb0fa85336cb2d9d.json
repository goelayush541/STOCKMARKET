{"ast":null,"code":"const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\nclass ApiService {\n  constructor() {\n    this.baseURL = API_BASE_URL;\n  }\n  async request(endpoint, options = {}) {\n    const url = `${this.baseURL}${endpoint}`;\n    const token = localStorage.getItem('token');\n    const headers = {\n      'Content-Type': 'application/json',\n      ...options.headers\n    };\n    if (token) {\n      headers['Authorization'] = `Bearer ${token}`;\n    }\n    const config = {\n      ...options,\n      headers\n    };\n    try {\n      const response = await fetch(url, config);\n\n      // Handle HTTP errors\n      if (!response.ok) {\n        if (response.status === 401) {\n          localStorage.removeItem('token');\n          window.location.reload();\n          throw new Error('Authentication failed. Please login again.');\n        }\n\n        // Try to get error message from response\n        let errorMessage = `HTTP error! status: ${response.status}`;\n        try {\n          const errorData = await response.json();\n          errorMessage = errorData.message || errorData.error || errorMessage;\n        } catch (e) {\n          // If response is not JSON, use status text\n          errorMessage = response.statusText || errorMessage;\n        }\n        throw new Error(errorMessage);\n      }\n      return response.json();\n    } catch (error) {\n      console.error('API request failed:', error);\n      throw error;\n    }\n  }\n\n  // Auth endpoints\n  async login(email, password) {\n    return this.request('/api/auth/login', {\n      method: 'POST',\n      body: JSON.stringify({\n        email,\n        password\n      })\n    });\n  }\n  async register(userData) {\n    return this.request('/api/auth/register', {\n      method: 'POST',\n      body: JSON.stringify(userData)\n    });\n  }\n  async logout() {\n    return this.request('/api/auth/logout', {\n      method: 'POST'\n    });\n  }\n  async verifyToken() {\n    return this.request('/api/auth/verify');\n  }\n\n  // User endpoints\n  async getUserProfile() {\n    try {\n      return await this.request('/api/user/profile');\n    } catch (error) {\n      console.error('Failed to get user profile:', error);\n      // Return mock data for development\n      return {\n        user: {\n          firstName: 'John',\n          lastName: 'Doe',\n          email: 'john.doe@example.com',\n          preferences: {\n            alerts: {\n              email: true,\n              push: false\n            },\n            defaultSymbols: ['AAPL', 'MSFT', 'GOOGL'],\n            riskTolerance: 'medium'\n          }\n        }\n      };\n    }\n  }\n  async updateUserProfile(updates) {\n    return this.request('/api/user/profile', {\n      method: 'PUT',\n      body: JSON.stringify(updates)\n    });\n  }\n\n  // Signals endpoints\n  async getSignals(params = {}) {\n    try {\n      const queryString = new URLSearchParams(params).toString();\n      const response = await this.request(`/api/signals?${queryString}`);\n\n      // Ensure we always return an array\n      if (Array.isArray(response)) {\n        return response;\n      } else if (response && Array.isArray(response.signals)) {\n        return response.signals;\n      } else if (response && response.pagination) {\n        return response.signals || [];\n      } else {\n        return [];\n      }\n    } catch (error) {\n      console.error('Failed to get signals:', error);\n      return []; // Return empty array on error\n    }\n  }\n  async getSignal(id) {\n    try {\n      return await this.request(`/api/signals/${id}`);\n    } catch (error) {\n      console.error('Failed to get signal:', error);\n      return null;\n    }\n  }\n\n  // News endpoints\n  async getNews(params = {}) {\n    try {\n      const queryString = new URLSearchParams(params).toString();\n      const response = await this.request(`/api/news?${queryString}`);\n      if (Array.isArray(response)) {\n        return response;\n      } else if (response && Array.isArray(response.news)) {\n        return response.news;\n      } else {\n        return [];\n      }\n    } catch (error) {\n      console.error('Failed to get news:', error);\n      return [];\n    }\n  }\n\n  // Market data endpoints\n  async getMarketData(symbol, period = '1d') {\n    try {\n      const response = await this.request(`/api/market-data/${symbol}?period=${period}`);\n      return Array.isArray(response) ? response : [];\n    } catch (error) {\n      console.error('Failed to get market data:', error);\n      return [];\n    }\n  }\n\n  // Backtesting endpoints\n  async runBacktest(config) {\n    try {\n      return await this.request('/api/backtest', {\n        method: 'POST',\n        body: JSON.stringify(config)\n      });\n    } catch (error) {\n      console.error('Failed to run backtest:', error);\n      throw error; // Re-throw for the component to handle\n    }\n  }\n  async getBacktestResults(id) {\n    try {\n      return await this.request(`/api/backtest/${id}`);\n    } catch (error) {\n      console.error('Failed to get backtest results:', error);\n      return null;\n    }\n  }\n\n  // Portfolio endpoints\n  async getPortfolio() {\n    try {\n      return await this.request('/api/portfolio');\n    } catch (error) {\n      console.error('Failed to get portfolio:', error);\n      // Return mock portfolio for development\n      return {\n        balance: 100000,\n        initialBalance: 100000,\n        positions: [],\n        performance: {\n          totalReturn: 0,\n          dailyReturn: 0,\n          sharpeRatio: 0,\n          maxDrawdown: 0\n        }\n      };\n    }\n  }\n  async updatePortfolio(updates) {\n    try {\n      return await this.request('/api/portfolio', {\n        method: 'PUT',\n        body: JSON.stringify(updates)\n      });\n    } catch (error) {\n      console.error('Failed to update portfolio:', error);\n      throw error;\n    }\n  }\n\n  // Admin endpoints (only for admin users)\n  async getSystemHealth() {\n    try {\n      return await this.request('/api/admin/health');\n    } catch (error) {\n      console.error('Failed to get system health:', error);\n      return {\n        status: 'unknown',\n        timestamp: new Date().toISOString()\n      };\n    }\n  }\n  async getUsageStats() {\n    try {\n      return await this.request('/api/admin/stats');\n    } catch (error) {\n      console.error('Failed to get usage stats:', error);\n      return {\n        users: {\n          total: 0,\n          active: 0\n        },\n        signals: 0,\n        backtests: 0\n      };\n    }\n  }\n\n  // Data ingestion endpoints\n  async ingestMarketData(symbol) {\n    try {\n      return await this.request('/api/data/ingest/market', {\n        method: 'POST',\n        body: JSON.stringify({\n          symbol\n        })\n      });\n    } catch (error) {\n      console.error('Failed to ingest market data:', error);\n      throw error;\n    }\n  }\n  async ingestNewsData(query) {\n    try {\n      return await this.request('/api/data/ingest/news', {\n        method: 'POST',\n        body: JSON.stringify({\n          query\n        })\n      });\n    } catch (error) {\n      console.error('Failed to ingest news data:', error);\n      throw error;\n    }\n  }\n\n  // Utility method to check if user is authenticated\n  isAuthenticated() {\n    return !!localStorage.getItem('token');\n  }\n\n  // Utility method to get token\n  getToken() {\n    return localStorage.getItem('token');\n  }\n\n  // Utility method to set token\n  setToken(token) {\n    localStorage.setItem('token', token);\n  }\n\n  // Utility method to remove token\n  removeToken() {\n    localStorage.removeItem('token');\n  }\n}\nexport const api = new ApiService();\nexport default api;","map":{"version":3,"names":["API_BASE_URL","process","env","REACT_APP_API_URL","ApiService","constructor","baseURL","request","endpoint","options","url","token","localStorage","getItem","headers","config","response","fetch","ok","status","removeItem","window","location","reload","Error","errorMessage","errorData","json","message","error","e","statusText","console","login","email","password","method","body","JSON","stringify","register","userData","logout","verifyToken","getUserProfile","user","firstName","lastName","preferences","alerts","push","defaultSymbols","riskTolerance","updateUserProfile","updates","getSignals","params","queryString","URLSearchParams","toString","Array","isArray","signals","pagination","getSignal","id","getNews","news","getMarketData","symbol","period","runBacktest","getBacktestResults","getPortfolio","balance","initialBalance","positions","performance","totalReturn","dailyReturn","sharpeRatio","maxDrawdown","updatePortfolio","getSystemHealth","timestamp","Date","toISOString","getUsageStats","users","total","active","backtests","ingestMarketData","ingestNewsData","query","isAuthenticated","getToken","setToken","setItem","removeToken","api"],"sources":["C:/Users/Ayush Goel/OneDrive/Desktop/DEPLOYED/STOCKMARKET/frontend/src/services/api.js"],"sourcesContent":["const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\r\n\r\nclass ApiService {\r\n  constructor() {\r\n    this.baseURL = API_BASE_URL;\r\n  }\r\n\r\n  async request(endpoint, options = {}) {\r\n    const url = `${this.baseURL}${endpoint}`;\r\n    const token = localStorage.getItem('token');\r\n    \r\n    const headers = {\r\n      'Content-Type': 'application/json',\r\n      ...options.headers\r\n    };\r\n    \r\n    if (token) {\r\n      headers['Authorization'] = `Bearer ${token}`;\r\n    }\r\n    \r\n    const config = {\r\n      ...options,\r\n      headers\r\n    };\r\n    \r\n    try {\r\n      const response = await fetch(url, config);\r\n      \r\n      // Handle HTTP errors\r\n      if (!response.ok) {\r\n        if (response.status === 401) {\r\n          localStorage.removeItem('token');\r\n          window.location.reload();\r\n          throw new Error('Authentication failed. Please login again.');\r\n        }\r\n        \r\n        // Try to get error message from response\r\n        let errorMessage = `HTTP error! status: ${response.status}`;\r\n        try {\r\n          const errorData = await response.json();\r\n          errorMessage = errorData.message || errorData.error || errorMessage;\r\n        } catch (e) {\r\n          // If response is not JSON, use status text\r\n          errorMessage = response.statusText || errorMessage;\r\n        }\r\n        \r\n        throw new Error(errorMessage);\r\n      }\r\n      \r\n      return response.json();\r\n    } catch (error) {\r\n      console.error('API request failed:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Auth endpoints\r\n  async login(email, password) {\r\n    return this.request('/api/auth/login', {\r\n      method: 'POST',\r\n      body: JSON.stringify({ email, password })\r\n    });\r\n  }\r\n\r\n  async register(userData) {\r\n    return this.request('/api/auth/register', {\r\n      method: 'POST',\r\n      body: JSON.stringify(userData)\r\n    });\r\n  }\r\n\r\n  async logout() {\r\n    return this.request('/api/auth/logout', {\r\n      method: 'POST'\r\n    });\r\n  }\r\n\r\n  async verifyToken() {\r\n    return this.request('/api/auth/verify');\r\n  }\r\n\r\n  // User endpoints\r\n  async getUserProfile() {\r\n    try {\r\n      return await this.request('/api/user/profile');\r\n    } catch (error) {\r\n      console.error('Failed to get user profile:', error);\r\n      // Return mock data for development\r\n      return {\r\n        user: {\r\n          firstName: 'John',\r\n          lastName: 'Doe',\r\n          email: 'john.doe@example.com',\r\n          preferences: {\r\n            alerts: { email: true, push: false },\r\n            defaultSymbols: ['AAPL', 'MSFT', 'GOOGL'],\r\n            riskTolerance: 'medium'\r\n          }\r\n        }\r\n      };\r\n    }\r\n  }\r\n\r\n  async updateUserProfile(updates) {\r\n    return this.request('/api/user/profile', {\r\n      method: 'PUT',\r\n      body: JSON.stringify(updates)\r\n    });\r\n  }\r\n\r\n  // Signals endpoints\r\n  async getSignals(params = {}) {\r\n    try {\r\n      const queryString = new URLSearchParams(params).toString();\r\n      const response = await this.request(`/api/signals?${queryString}`);\r\n      \r\n      // Ensure we always return an array\r\n      if (Array.isArray(response)) {\r\n        return response;\r\n      } else if (response && Array.isArray(response.signals)) {\r\n        return response.signals;\r\n      } else if (response && response.pagination) {\r\n        return response.signals || [];\r\n      } else {\r\n        return [];\r\n      }\r\n    } catch (error) {\r\n      console.error('Failed to get signals:', error);\r\n      return []; // Return empty array on error\r\n    }\r\n  }\r\n\r\n  async getSignal(id) {\r\n    try {\r\n      return await this.request(`/api/signals/${id}`);\r\n    } catch (error) {\r\n      console.error('Failed to get signal:', error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  // News endpoints\r\n  async getNews(params = {}) {\r\n    try {\r\n      const queryString = new URLSearchParams(params).toString();\r\n      const response = await this.request(`/api/news?${queryString}`);\r\n      \r\n      if (Array.isArray(response)) {\r\n        return response;\r\n      } else if (response && Array.isArray(response.news)) {\r\n        return response.news;\r\n      } else {\r\n        return [];\r\n      }\r\n    } catch (error) {\r\n      console.error('Failed to get news:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  // Market data endpoints\r\n  async getMarketData(symbol, period = '1d') {\r\n    try {\r\n      const response = await this.request(`/api/market-data/${symbol}?period=${period}`);\r\n      return Array.isArray(response) ? response : [];\r\n    } catch (error) {\r\n      console.error('Failed to get market data:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  // Backtesting endpoints\r\n  async runBacktest(config) {\r\n    try {\r\n      return await this.request('/api/backtest', {\r\n        method: 'POST',\r\n        body: JSON.stringify(config)\r\n      });\r\n    } catch (error) {\r\n      console.error('Failed to run backtest:', error);\r\n      throw error; // Re-throw for the component to handle\r\n    }\r\n  }\r\n\r\n  async getBacktestResults(id) {\r\n    try {\r\n      return await this.request(`/api/backtest/${id}`);\r\n    } catch (error) {\r\n      console.error('Failed to get backtest results:', error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  // Portfolio endpoints\r\n  async getPortfolio() {\r\n    try {\r\n      return await this.request('/api/portfolio');\r\n    } catch (error) {\r\n      console.error('Failed to get portfolio:', error);\r\n      // Return mock portfolio for development\r\n      return {\r\n        balance: 100000,\r\n        initialBalance: 100000,\r\n        positions: [],\r\n        performance: {\r\n          totalReturn: 0,\r\n          dailyReturn: 0,\r\n          sharpeRatio: 0,\r\n          maxDrawdown: 0\r\n        }\r\n      };\r\n    }\r\n  }\r\n\r\n  async updatePortfolio(updates) {\r\n    try {\r\n      return await this.request('/api/portfolio', {\r\n        method: 'PUT',\r\n        body: JSON.stringify(updates)\r\n      });\r\n    } catch (error) {\r\n      console.error('Failed to update portfolio:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Admin endpoints (only for admin users)\r\n  async getSystemHealth() {\r\n    try {\r\n      return await this.request('/api/admin/health');\r\n    } catch (error) {\r\n      console.error('Failed to get system health:', error);\r\n      return { status: 'unknown', timestamp: new Date().toISOString() };\r\n    }\r\n  }\r\n\r\n  async getUsageStats() {\r\n    try {\r\n      return await this.request('/api/admin/stats');\r\n    } catch (error) {\r\n      console.error('Failed to get usage stats:', error);\r\n      return { users: { total: 0, active: 0 }, signals: 0, backtests: 0 };\r\n    }\r\n  }\r\n\r\n  // Data ingestion endpoints\r\n  async ingestMarketData(symbol) {\r\n    try {\r\n      return await this.request('/api/data/ingest/market', {\r\n        method: 'POST',\r\n        body: JSON.stringify({ symbol })\r\n      });\r\n    } catch (error) {\r\n      console.error('Failed to ingest market data:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async ingestNewsData(query) {\r\n    try {\r\n      return await this.request('/api/data/ingest/news', {\r\n        method: 'POST',\r\n        body: JSON.stringify({ query })\r\n      });\r\n    } catch (error) {\r\n      console.error('Failed to ingest news data:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Utility method to check if user is authenticated\r\n  isAuthenticated() {\r\n    return !!localStorage.getItem('token');\r\n  }\r\n\r\n  // Utility method to get token\r\n  getToken() {\r\n    return localStorage.getItem('token');\r\n  }\r\n\r\n  // Utility method to set token\r\n  setToken(token) {\r\n    localStorage.setItem('token', token);\r\n  }\r\n\r\n  // Utility method to remove token\r\n  removeToken() {\r\n    localStorage.removeItem('token');\r\n  }\r\n}\r\n\r\nexport const api = new ApiService();\r\nexport default api;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}