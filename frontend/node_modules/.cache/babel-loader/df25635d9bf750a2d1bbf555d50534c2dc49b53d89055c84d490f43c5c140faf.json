{"ast":null,"code":"const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\nclass AuthService {\n  constructor() {\n    this.token = localStorage.getItem('token');\n  }\n  async login(email, password) {\n    try {\n      console.log('Attempting login for:', email);\n      const response = await fetch(`${API_BASE_URL}/api/auth/login`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email,\n          password\n        })\n      });\n      const data = await response.json();\n      if (!response.ok) {\n        console.error('Login failed:', data);\n        throw new Error(data.message || `Login failed: ${response.status}`);\n      }\n      console.log('Login successful, token received');\n      this.token = data.token;\n      localStorage.setItem('token', data.token);\n      return {\n        user: data.user,\n        token: data.token\n      };\n    } catch (error) {\n      console.error('Login error:', error);\n\n      // Provide more specific error messages\n      if (error.name === 'TypeError' && error.message === 'Failed to fetch') {\n        throw new Error('Cannot connect to server. Please check if the backend is running.');\n      }\n      throw new Error(error.message || 'Could not login');\n    }\n  }\n  async register(userData) {\n    try {\n      console.log('Attempting registration for:', userData.email);\n      const response = await fetch(`${API_BASE_URL}/api/auth/register`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(userData)\n      });\n      const data = await response.json();\n      if (!response.ok) {\n        console.error('Registration failed:', data);\n        throw new Error(data.message || `Registration failed: ${response.status}`);\n      }\n      console.log('Registration successful');\n      this.token = data.token;\n      localStorage.setItem('token', data.token);\n      return {\n        user: data.user,\n        token: data.token\n      };\n    } catch (error) {\n      console.error('Registration error:', error);\n      if (error.name === 'TypeError' && error.message === 'Failed to fetch') {\n        throw new Error('Cannot connect to server. Please check if the backend is running.');\n      }\n      throw new Error(error.message || 'Could not register');\n    }\n  }\n  async verifyToken(token) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/api/auth/verify`, {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      const data = await response.json();\n      if (!response.ok) {\n        console.error('Token verification failed:', data);\n        throw new Error(data.message || 'Token verification failed');\n      }\n      return data;\n    } catch (error) {\n      console.error('Token verification error:', error);\n      throw error;\n    }\n  }\n  logout() {\n    console.log('Logging out user');\n    this.token = null;\n    localStorage.removeItem('token');\n  }\n  isAuthenticated() {\n    return !!this.token;\n  }\n  getToken() {\n    return this.token;\n  }\n}\nexport const authService = new AuthService();\nexport default authService;","map":{"version":3,"names":["API_BASE_URL","process","env","REACT_APP_API_URL","AuthService","constructor","token","localStorage","getItem","login","email","password","console","log","response","fetch","method","headers","body","JSON","stringify","data","json","ok","error","Error","message","status","setItem","user","name","register","userData","verifyToken","logout","removeItem","isAuthenticated","getToken","authService"],"sources":["C:/Users/Ayush Goel/OneDrive/Desktop/DEPLOYED/STOCKMARKET/frontend/src/services/auth.js"],"sourcesContent":["const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\r\n\r\nclass AuthService {\r\n  constructor() {\r\n    this.token = localStorage.getItem('token');\r\n  }\r\n\r\n  async login(email, password) {\r\n    try {\r\n      console.log('Attempting login for:', email);\r\n      \r\n      const response = await fetch(`${API_BASE_URL}/api/auth/login`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({ email, password })\r\n      });\r\n\r\n      const data = await response.json();\r\n\r\n      if (!response.ok) {\r\n        console.error('Login failed:', data);\r\n        throw new Error(data.message || `Login failed: ${response.status}`);\r\n      }\r\n\r\n      console.log('Login successful, token received');\r\n      this.token = data.token;\r\n      localStorage.setItem('token', data.token);\r\n      \r\n      return { user: data.user, token: data.token };\r\n    } catch (error) {\r\n      console.error('Login error:', error);\r\n      \r\n      // Provide more specific error messages\r\n      if (error.name === 'TypeError' && error.message === 'Failed to fetch') {\r\n        throw new Error('Cannot connect to server. Please check if the backend is running.');\r\n      }\r\n      \r\n      throw new Error(error.message || 'Could not login');\r\n    }\r\n  }\r\n\r\n  async register(userData) {\r\n    try {\r\n      console.log('Attempting registration for:', userData.email);\r\n      \r\n      const response = await fetch(`${API_BASE_URL}/api/auth/register`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify(userData)\r\n      });\r\n\r\n      const data = await response.json();\r\n\r\n      if (!response.ok) {\r\n        console.error('Registration failed:', data);\r\n        throw new Error(data.message || `Registration failed: ${response.status}`);\r\n      }\r\n\r\n      console.log('Registration successful');\r\n      this.token = data.token;\r\n      localStorage.setItem('token', data.token);\r\n      \r\n      return { user: data.user, token: data.token };\r\n    } catch (error) {\r\n      console.error('Registration error:', error);\r\n      \r\n      if (error.name === 'TypeError' && error.message === 'Failed to fetch') {\r\n        throw new Error('Cannot connect to server. Please check if the backend is running.');\r\n      }\r\n      \r\n      throw new Error(error.message || 'Could not register');\r\n    }\r\n  }\r\n\r\n  async verifyToken(token) {\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}/api/auth/verify`, {\r\n        method: 'GET',\r\n        headers: {\r\n          'Authorization': `Bearer ${token}`\r\n        }\r\n      });\r\n\r\n      const data = await response.json();\r\n\r\n      if (!response.ok) {\r\n        console.error('Token verification failed:', data);\r\n        throw new Error(data.message || 'Token verification failed');\r\n      }\r\n\r\n      return data;\r\n    } catch (error) {\r\n      console.error('Token verification error:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  logout() {\r\n    console.log('Logging out user');\r\n    this.token = null;\r\n    localStorage.removeItem('token');\r\n  }\r\n\r\n  isAuthenticated() {\r\n    return !!this.token;\r\n  }\r\n\r\n  getToken() {\r\n    return this.token;\r\n  }\r\n}\r\n\r\nexport const authService = new AuthService();\r\nexport default authService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}