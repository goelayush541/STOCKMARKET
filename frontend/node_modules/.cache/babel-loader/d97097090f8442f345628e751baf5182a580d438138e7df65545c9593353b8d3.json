{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useRef } from 'react';\nimport { api } from '../services/api';\nexport const useSignals = (filters = {}) => {\n  _s();\n  const [signals, setSignals] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const abortControllerRef = useRef(null);\n  useEffect(() => {\n    const fetchSignals = async () => {\n      // Cancel previous request if it exists\n      if (abortControllerRef.current) {\n        abortControllerRef.current.abort();\n      }\n      abortControllerRef.current = new AbortController();\n      try {\n        setLoading(true);\n        setError(null);\n        const data = await api.getSignals(filters);\n        setSignals(data);\n      } catch (err) {\n        if (err.name === 'AbortError') {\n          console.log('Request was aborted');\n          return;\n        }\n        console.error('Error fetching signals:', err);\n        setError(err.message);\n\n        // Fallback to mock data if API is down\n        if (err.message.includes('Network error') || err.message.includes('Failed to fetch')) {\n          setSignals(generateMockSignals(filters.limit || 10));\n          setError('Using mock data (server unavailable)');\n        }\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchSignals();\n\n    // Cleanup function to abort request if component unmounts\n    return () => {\n      if (abortControllerRef.current) {\n        abortControllerRef.current.abort();\n      }\n    };\n  }, [filters]);\n  const refresh = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      const data = await api.getSignals(filters);\n      setSignals(data);\n    } catch (err) {\n      console.error('Error refreshing signals:', err);\n      setError(err.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n  return {\n    signals,\n    loading,\n    error,\n    refresh\n  };\n};\n\n// Fallback mock data generator\n_s(useSignals, \"Gq8UyccBf2YQCUlfJ7JZ/fVF86A=\");\nfunction generateMockSignals(limit = 10) {\n  const symbols = ['AAPL', 'MSFT', 'GOOGL', 'AMZN', 'TSLA', 'NVDA', 'META'];\n  const signalTypes = ['BUY', 'SELL', 'NEUTRAL'];\n  return Array.from({\n    length: limit\n  }, (_, i) => ({\n    _id: `mock_signal_${Date.now()}_${i}`,\n    symbol: symbols[Math.floor(Math.random() * symbols.length)],\n    signalType: signalTypes[Math.floor(Math.random() * signalTypes.length)],\n    strength: Math.random() * 0.5 + 0.5,\n    confidence: Math.random() * 0.3 + 0.7,\n    source: 'mock',\n    generatedAt: new Date(),\n    explanation: 'Mock data - server connection issue',\n    expiration: new Date(Date.now() + 2 * 60 * 60 * 1000)\n  }));\n}","map":{"version":3,"names":["useState","useEffect","useRef","api","useSignals","filters","_s","signals","setSignals","loading","setLoading","error","setError","abortControllerRef","fetchSignals","current","abort","AbortController","data","getSignals","err","name","console","log","message","includes","generateMockSignals","limit","refresh","symbols","signalTypes","Array","from","length","_","i","_id","Date","now","symbol","Math","floor","random","signalType","strength","confidence","source","generatedAt","explanation","expiration"],"sources":["C:/Users/Ayush Goel/OneDrive/Desktop/DEPLOYED/STOCKMARKET/frontend/src/hooks/useSignals.js"],"sourcesContent":["import { useState, useEffect, useRef } from 'react';\r\nimport { api } from '../services/api';\r\n\r\nexport const useSignals = (filters = {}) => {\r\n  const [signals, setSignals] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const abortControllerRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    const fetchSignals = async () => {\r\n      // Cancel previous request if it exists\r\n      if (abortControllerRef.current) {\r\n        abortControllerRef.current.abort();\r\n      }\r\n      \r\n      abortControllerRef.current = new AbortController();\r\n      \r\n      try {\r\n        setLoading(true);\r\n        setError(null);\r\n        \r\n        const data = await api.getSignals(filters);\r\n        setSignals(data);\r\n      } catch (err) {\r\n        if (err.name === 'AbortError') {\r\n          console.log('Request was aborted');\r\n          return;\r\n        }\r\n        \r\n        console.error('Error fetching signals:', err);\r\n        setError(err.message);\r\n        \r\n        // Fallback to mock data if API is down\r\n        if (err.message.includes('Network error') || err.message.includes('Failed to fetch')) {\r\n          setSignals(generateMockSignals(filters.limit || 10));\r\n          setError('Using mock data (server unavailable)');\r\n        }\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchSignals();\r\n\r\n    // Cleanup function to abort request if component unmounts\r\n    return () => {\r\n      if (abortControllerRef.current) {\r\n        abortControllerRef.current.abort();\r\n      }\r\n    };\r\n  }, [filters]);\r\n\r\n  const refresh = async () => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n      \r\n      const data = await api.getSignals(filters);\r\n      setSignals(data);\r\n    } catch (err) {\r\n      console.error('Error refreshing signals:', err);\r\n      setError(err.message);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return { signals, loading, error, refresh };\r\n};\r\n\r\n// Fallback mock data generator\r\nfunction generateMockSignals(limit = 10) {\r\n  const symbols = ['AAPL', 'MSFT', 'GOOGL', 'AMZN', 'TSLA', 'NVDA', 'META'];\r\n  const signalTypes = ['BUY', 'SELL', 'NEUTRAL'];\r\n  \r\n  return Array.from({ length: limit }, (_, i) => ({\r\n    _id: `mock_signal_${Date.now()}_${i}`,\r\n    symbol: symbols[Math.floor(Math.random() * symbols.length)],\r\n    signalType: signalTypes[Math.floor(Math.random() * signalTypes.length)],\r\n    strength: Math.random() * 0.5 + 0.5,\r\n    confidence: Math.random() * 0.3 + 0.7,\r\n    source: 'mock',\r\n    generatedAt: new Date(),\r\n    explanation: 'Mock data - server connection issue',\r\n    expiration: new Date(Date.now() + 2 * 60 * 60 * 1000)\r\n  }));\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}